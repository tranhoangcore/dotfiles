# ~/.functions
fsend(){
    name=$(basename $1)
    #TÃªn file cho url
    encode_name=$(urlencode $1)
    #echo "\n$encode_name"
    size=$(stat -c%s "$1")
    #Khoi tao key
    token=$(curl -d '{"email":"nowdtw@gmail.com","password":"Z7@Dn3qDn^3A&s"}' -H "Content-Type: application/json" -X POST http://fsend.vn/v2/tokens | jq -r .token)
    #mykey=$(curl -X POST {"Content-Type":"application/json","Authorization":"Bearer $token"} http://fsend.vn/v2/up-keys | jq -r ".key")
    mykey=$(curl -H "Content-Type: application/json" -H "Authorization: Bearer $token" -X POST http://fsend.vn/v2/up-keys | jq -r ".key")
    #echo "\n$mykey"
    #curl --progress-bar --upload-file "$1" http://fsend.vn/v2/up-keys/$mykey/upload
    #curl --progress-bar --upload-file  "$1" -d '{"file_name":"$name", "file_size":"$size"}' http://fsend.vn/v2/up-keys/$mykey
    # curl -H "Authorization : Bearer 78c6LV4HNbkiAzt4jqWtZiFoFwxTtAJf" 
    # -X POST -d '{"file_name":"'$name'", "file_size":"'$size'"}'\
    # --progress-bar --upload-file "$1" http://fsend.vn/v2/up-keys/$mykey/upload/
    myrequest=$(curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d '{"file_name":"'$name'", "file_size":"'$size'"}'  http://fsend.vn/v2/up-keys/$mykey/upload | jq -r ".location")
    echo "\n$myrequest"
    url="$myrequest?flowChunkNumber=1&flowChunkSize=2000000000&flowCurrentChunkSize=$size&flowTotalSize=$size&flowIdentifier=$size-$encode_name&flowFilename=$encode_name&flowRelativePath=$encode_name&flowTotalChunks=10"
    curl -X OPTIONS -H -d "Content-Type: text/plain"  "$url"
    #Escape file name
    file=$(printf '%q' $1)
    #echo "\n$file\n"
    #echo "\n$size"
    #curl -X POST --progress-bar --upload-file "$1" "$url"
    curl --progress-bar -T $1 "$url"
    download=$(curl -H "Content-Type: application/json" -H "Authorization: Bearer $token" -X POST "http://fsend.vn/v2/transfers?key=$mykey" | jq -r ".url")
    if [ "$download" = "null" ]
    then
        echo "\nCan't Upload!"
    else
        echo $download | cclip
        echo "\n$download"
        echo "\nUpload Completed!"
    fi
}

fshare() {
  curl -SL -O "$(curl -sSL -XGET "https://gl.codfee.xyz/getlink?link=${1}" | jq -r '.link')"
}

sshotmpv(){
#!/bin/bash
# usage: ./sshotmpv -n num_screens -o /save_dir -i /input_video | optional: -s sub_track_id -c compression_level

# Lets check the input args
ME=`basename $0`
while [[ $# > 1 ]]
do
  key="$1"
    case $key in
      -n|--number)
        NUM_OF_SCREENS="$2"
        shift
      ;;
      -o|--output)
        SAVE_DIR="$2"
        TEMP_DIR="${SAVE_DIR}/temp"
        shift
      ;;
      -i|--input)
        VIDEO_FILE="$2"
        VIDEO_FILE_NAME="${VIDEO_FILE##*/}"
        shift
      ;;
      -s|-sid|--sub)
        SID="$2"
        shift
      ;;
      -c|--compression)
        COMPRESSION_LEVEL="$2"
        shift
      ;;
      *)
        # unknown option
        # display valid args and exit
        echo "Invalid args, usage: ${ME} -n num_screens -o /save_dir -i /input_video | optional: -s sub_track_id -c compression_level"
        exit 0
      ;;
    esac
  shift
done

# Check required inputs are set
if [ -z "$NUM_OF_SCREENS" ]; then
  echo "Invalid args, missing: -n num_of_screens"
  exit 0;
fi
if [ -z "$SAVE_DIR" ]; then
  echo "Invalid args, missing: -o /path_to_save_screens"
  exit 0;
fi
if [ -z "$VIDEO_FILE" ]; then
  echo "Invalid args, missing: -i /path_to_video_file"
  exit 0;
fi


if [ -d "$SAVE_DIR" ]; then
  if [ ! -f "$VIDEO_FILE" ]; then
    echo "Not a valid input file: ${VIDEO_FILE}"
    exit 0
  fi
  duration_milli=`mediainfo --Inform="General;%Duration%" "$VIDEO_FILE"`;
  #echo "Video duration millis: $duration_milli"

  duration_seconds=$(($duration_milli/1000))

  echo "Video duration seconds: $duration_seconds"

  time_gap=$((($duration_seconds/$NUM_OF_SCREENS)+1))
  echo "Time gap: $time_gap"
  
  # Check optionals
  if [ -z "$SID" ]; then
    # set default sub track id?
    SID=1
  fi
  if [ -z "$COMPRESSION_LEVEL" ]; then
    # set default compression to 0
    COMPRESSION_LEVEL=7
  fi


  mpv --vo=image:format=png:png-compression=${COMPRESSION_LEVEL}:outdir="${TEMP_DIR}" --no-audio --sid=${SID} --untimed --hr-seek=yes --sstep=${time_gap} --demuxer-mkv-subtitle-preroll "$VIDEO_FILE"
  
  # consider using  --demuxer-mkv-subtitle-preroll if the subs arent' being captured, will make seeking slower.
  # to select subtitle track use --sid x

  #Rename and move the created files
  count=0
  #pwd=`pwd`
  #cd "${TEMP_DIR}"
  for i in "${TEMP_DIR}/"*.png
  do
    current_time=$(($count*$time_gap))
    h=$(($current_time/3600))
    m=$((($current_time%3600)/60))
    s=$(($current_time%60))
    timestamp=`printf "[%02d.%02d.%02d]" $h $m $s`
    temp_file="${i##*/}"
    echo "$((count+1)). Moving: "${temp_file}" => ${VIDEO_FILE_NAME}_${timestamp}.png"
    mv $i "${SAVE_DIR}/${VIDEO_FILE_NAME}_${timestamp}.png"
    count=$((count+1))
  done

  echo "Completed. Screenshots saved to: ${SAVE_DIR}"
else
  echo "Not a valid output directory: $SAVE_DIR"
fi
}
transfer() { 
    # check arguments
    if [ $# -eq 0 ]; 
    then 
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )
    
    # upload stdin or file
    file=$1

    if tty -s; 
    then 
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g') 

        if [ ! -e $file ];
        then
            echo "File $file doesn't exists."
            return 1
        fi
        
        if [ -d $file ];
        then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else 
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi
   
    # cat output link
    cat $tmpfile
   # echo $tmpfile | cclip

    # cleanup
    rm -f $tmpfile
}


# diff with colors
function diff {
    colordiff -u "$@"
}

# build golang static binary (useful for dockerize)
# Usage: go_build_static -o app app.go
function go_build_static () {
    version=${version:-dev}
    timestamp="$(TZ=UTC date -u '+%Y-%m-%dT%H:%M:%SZ')"
    commit=$(git rev-parse HEAD)

    # GOOS=linux GOARCH=amd64
    CGO_ENABLED=0 go build -a -ldflags "-s -w \
                                        -extldflags '-static' \
                                        -X main.Version=${version} \
                                        -X main.BuildTime=${timestamp} \
                                        -X main.GitHash=${commit}" "$@"
}


# forwarded port ${2} on server to ${1} on the local (client)
# Usage: ssh_tunnel 5900 5901 login@remote-server
ssh_tunnel () {
    # shellcheck disable=SC2029
    ssh -L "${1}":localhost:"${2}" -N -f "${3}"
}

# create SOCKS 5 proxy on local (client) at port ${1}
# Usage: create_ssh_proxy_at_port 9999 login@remote-server
create_ssh_proxy_at_port () {
    # shellcheck disable=SC2029
    ssh -f -C2qTnN -D "${1}" "${2}"
}

# Get information about IP address
ipinfo () {
    curl -s "ipinfo.io/$*?token=${IPINFO_TOKEN}"
}

# Lookup MAC vendor
macvendorlookup () {
    curl -s "http://www.macvendorlookup.com/api/v2/$*" | jq '.[] | .company'
    # curl -s "http://api.macvendors.com/$*"
}

### OpenSSL shortcut ###
openssl-view-certificate () {
    openssl x509 -text -noout -in "${1}"
}

openssl-view-csr () {
    openssl req -text -noout -verify -in "${1}"
}

openssl-view-key () {
    openssl rsa -check -in "${1}"
}

openssl-view-pkcs12 () {
    openssl pkcs12 -info -in "${1}"
}

# Connecting to a server (Ctrl C exits)
openssl-client () {
    openssl s_client -status -connect "${1}":443
}

# Convert PEM private key, PEM certificate and PEM CA certificate (used by nginx, Apache, and other openssl apps) to a PKCS12 file (typically for use with Windows or Tomcat)
openssl-convert-pem-to-p12 () {
    openssl pkcs12 -export -inkey "${1}" -in "${2}" -certfile "${3}" -out "${4}"
}

# Convert a PKCS12 file to PEM
openssl-convert-p12-to-pem () {
    openssl pkcs12 -nodes -in "${1}" -out "${2}"
}

# Check the modulus of a certificate (to see if it matches a key)
openssl-check-certificate-modulus () {
    openssl x509 -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a key (to see if it matches a certificate)
openssl-check-key-modulus () {
    openssl rsa -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a certificate request
openssl-check-key-modulus () {
    openssl req -noout -modulus -in "${1}" | shasum -a 256
}

# Encrypt a file (because zip crypto isn't secure)
openssl-encrypt () {
    openssl aes-256-cbc -salt -in "${1}" -out "${2}"
}

# Decrypt a file
openssl-decrypt () {
    openssl aes-256-cbc -d -in "${1}" -out "${2}"
}

# Public Diffie-Hellman Parameter Service/Tool
# https://2ton.com.au/dhtool/
dhparam () {
    size=${1:-4096}
    curl -sSL "https://2ton.com.au/dhparam/$size" -o dhparam.pem
}

weather () {
    location=${1:-sgn} # sgn: HCM, han: HN
    curl -4 "http://wttr.in/${location}"
}

# bashlogger
bashlogger () {
    script /tmp/log.txt
}

if [[ "$OSTYPE" = linux* ]] ; then
    # Install docker-compose latest version
    install-dcp () {
        fname="docker-compose-$(uname -s)-$(uname -m)"
        fbin="${MYBIN}/docker-compose"
        fcomp="$HOME/.local/share/zsh/site-functions/_docker-compose"

        repos_dl="https://github.com/docker/compose/releases/download"
        repos_api="https://api.github.com/repos/docker/compose/releases/latest"
        version=$(curl -sSL ${repos_api} | jq -r '. | .tag_name')

        # download and install binary
        /bin/rm -f "$fbin"
        curl -sSL "${repos_dl}/${version}/${fname}" -o "${fbin}"
        chmod +x "$fbin"

        # download and install zsh completion
        /bin/rm -f "${fcomp}"
        curl -sSL https://raw.githubusercontent.com/docker/compose/"${version}"/contrib/completion/zsh/_docker-compose -o "${fcomp}"
    }

    # Install docker-machine latest version
    install-dcm () {
        fname="docker-machine-$(uname -s)-$(uname -m)"
        fbin="${MYBIN}/docker-machine"
        fcomp="$HOME/.local/share/zsh/site-functions/_docker-machine"

        repos_dl="https://github.com/docker/machine/releases/download"
        repos_api="https://api.github.com/repos/docker/machine/releases/latest"
        version=$(curl -sSL ${repos_api} | jq -r '. | .tag_name')

        # download and install binary
        /bin/rm -f "$fbin"
        curl -sSL "${repos_dl}/${version}/${fname}" -o "${fbin}"
        chmod +x "$fbin"

        # download and install zsh completion
        /bin/rm -f "${fcomp}"
        curl -sSL https://raw.githubusercontent.com/docker/machine/"${version}"/contrib/completion/zsh/_docker-machine -o "${fcomp}"
    }

    # Install Protobuf complier latest version
    install-protoc () {
        repos_api="https://api.github.com/repos/google/protobuf/releases/latest"
        # remove first character with ${VAR#?}
        version=${$(curl -sSL $repos_api | jq -r '. | .tag_name')#?}
        repos_dl="https://github.com/google/protobuf/releases/download/v${version}/protoc-${version}-linux-x86_64.zip"
        curl -sSL $repos_dl -o /tmp/protoc.zip
        sudo unzip -qq -o -d /usr/local/ /tmp/protoc.zip
        sudo chmod +x /usr/local/bin/protoc
        /bin/rm -f /tmp/protoc.zip
    }


    # install cli53
    install-cli53 () {
        fname="cli53-linux-amd64"
        fbin="${MYBIN}/cli53"
        repos_dl="https://github.com/barnybug/cli53/releases/download"
        repos_api="https://api.github.com/repos/barnybug/cli53/releases/latest"
        version=$(curl -sSL $repos_api | jq -r '. | .tag_name')
        /bin/rm -f "$fbin"
        curl -sSL $repos_dl/"$version"/"$fname" -o "$fbin"
        chmod +x "$fbin"
    }


    # Install hugo
    install-hugo () {
        readonly version=$(curl -sSL https://api.github.com/repos/gohugoio/hugo/releases/latest | jq -r '. | .tag_name')
        curl -sSL "https://github.com/gohugoio/hugo/releases/download/${version}/hugo_${version#?}_Linux-64bit.tar.gz" | tar -C "${MYBIN}" -xzf - hugo
    }

    # Usage: install-kubectl v1.8.1
    install-kubectl() {
        #shellcheck disable=SC2155
        readonly current=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        readonly version=${1:-$current}
        echo "installing kubectl $version"
        curl -sSL "https://dl.k8s.io/${version}/bin/linux/amd64/kubectl" \
             -o ~/Applications/google-cloud-sdk/bin/kubectl
    }

    # Usage: install-helm v2.0.7
    install-helm() {
        readonly current=$(curl -sSL https://api.github.com/repos/kubernetes/helm/releases/latest | jq -r '. | .tag_name')
        readonly version=${1:-$current}
        curl -sSL "https://kubernetes-helm.storage.googleapis.com/helm-${version}-linux-amd64.tar.gz" | tar -C "${MYBIN}" -xzf - --strip-components=1 linux-amd64/helm
    }

    # Usage: install-minikube
    install-minikube() {
        version=${1:-latest}
        curl -sSL "https://storage.googleapis.com/minikube/releases/${version}/minikube-linux-amd64" \
             -o "$MYBIN/minikube"
    }

    # Usage: install-kops 1.7.1
    install-kops() {
        readonly current=$(curl -sSL https://api.github.com/repos/kubernetes/kops/releases/latest | jq -r '. | .tag_name')
        readonly version=${1:-$current}
        curl -sSL "https://github.com/kubernetes/kops/releases/download/${version}/kops-linux-amd64" \
             -o "$MYBIN/kops"
    }

    # Usage: install-shellcheck
    install-shellcheck() {
        curl -sSL https://storage.googleapis.com/shellcheck/shellcheck-stable.linux.x86_64.tar.xz | tar -C "${MYBIN}" -Jxf - --strip-components=1 shellcheck-stable/shellcheck
    }

    # Usage: pia sgn up/down
    pia() {
        location=${1:-sgn}
        action=${2:-up}
        case ${location} in
            hk )
                nmcli con "${action}" id 'PIA - Hong Kong'
                ;;
            us )
                nmcli con "${action}" id 'PIA - US West'
                ;;
            * )
                nmcli con "${action}" id 'PIA - Singapore'
                ;;
        esac
    }

fi


# echo "You can simulate on-screen typing just like in the movies" | pv -qL 10
typing-echo () {
    echo "$@" | pv -qL 10
}

# fast-sync user@<source>:<source_dir> <dest_dir>
fast-sync () {
    rsync -aHAXxv --numeric-ids --delete --progress \
          -e "ssh -T -c arcfour -o Compression=no -x" "$@"
}

# htpasswd
htpasswd () {
    printf "Username: "
    read -r LOGIN_USER
    printf "%s:$(openssl passwd -apr1)\\n" "${LOGIN_USER}"
}
# End of file
